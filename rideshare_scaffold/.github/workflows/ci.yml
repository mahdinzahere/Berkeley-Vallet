name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rideshare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Setup test database
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rideshare_test"
        python -c "
        from app.database import engine
        from app.models import Base
        Base.metadata.create_all(bind=engine)
        "
    
    - name: Run backend tests
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rideshare_test"
        export JWT_SECRET="test-secret"
        export STRIPE_SECRET_KEY="sk_test_test"
        export OPENAI_API_KEY="sk-test"
        python -m pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-mobile-apps:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies and test rider app
      run: |
        cd apps/rider
        npm ci
        npm run lint --if-present
        npm test --if-present
    
    - name: Install dependencies and test driver app
      run: |
        cd apps/driver
        npm ci
        npm run lint --if-present
        npm test --if-present

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-mobile-apps]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t rideshare-backend:latest .
    
    - name: Test Docker image
      run: |
        cd backend
        docker run --rm rideshare-backend:latest python -c "print('Backend image test successful')"

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test-backend, test-mobile-apps, docker-build]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to preview environment
      run: |
        echo "Deploying preview for PR #${{ github.event.number }}"
        # Add your deployment logic here
        # This could deploy to a staging environment or create a preview URL

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-mobile-apps, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production"
        # Add your production deployment logic here
        # This could deploy to your production servers or cloud platform
